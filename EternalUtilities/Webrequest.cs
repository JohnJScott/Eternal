// Copyright 2015 Eternal Developments LLC. All Rights Reserved.

using System;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Text;

namespace Eternal.EternalUtilities
{
	/// <summary>
	/// A wrapper to help send simple POSTs and GETs
	/// </summary>
	public sealed class BasicWebRequest
	{
		/// <summary>
		/// A private constructor to suppress the generation of a public one generated by the compiler.
		/// </summary>
		private BasicWebRequest()
		{
		}

		/// <summary>
		/// Create a web request to send.
		/// </summary>
		/// <param name="WebRequestString">The URL to send to.</param>
		/// <param name="Method">"POST" or "GET".</param>
		/// <returns>An web request that can be used to get a response.</returns>
		static private HttpWebRequest CreateWebRequest( string WebRequestString, string Method )
		{
			HttpWebRequest Request;
			try
			{
				Request = ( HttpWebRequest )WebRequest.Create( WebRequestString );
				Request.Method = Method;
				Request.AllowAutoRedirect = false;
				Request.UseDefaultCredentials = true;
				Request.SendChunked = false;
				Request.ContentLength = 0;
			}
			catch( Exception )
			{
				Request = null;
			}

			return Request;
		}

		/// <summary>
		/// Get a web response from a web request.
		/// </summary>
		/// <param name="Request">A web request.</param>
		/// <returns>A string of the response, or blank if there was an error.</returns>
		static private string GetWebResponse( HttpWebRequest Request )
		{
			string ResponseString = "";

			try
			{
				HttpWebResponse WebResponse = ( HttpWebResponse )Request.GetResponse();

				// Process the response
				Stream ResponseStream = WebResponse.GetResponseStream();
				byte[] RawResponse = new byte[WebResponse.ContentLength];
				ResponseStream.Read( RawResponse, 0, ( int )WebResponse.ContentLength );
				ResponseStream.Close();

				ResponseString = Encoding.UTF8.GetString( RawResponse );
			}
			catch( Exception Ex )
			{
				ResponseString = "";
				Debug.WriteLine( Ex.ToString() );
			}

			return ResponseString;
		}

		/// <summary>
		/// A helper function to return a string from a URL and method.
		/// </summary>
		/// <param name="WebRequestInfo">The URL to make the query.</param>
		/// <param name="Method">"GET" or "POST"</param>
		/// <returns>A string of the reply from the web request.</returns>
		static public string RequestWebResponse( string WebRequestInfo, string Method )
		{
			string ResponseValue = "";

			if( WebRequestInfo != null )
			{
				HttpWebRequest Request = CreateWebRequest( WebRequestInfo, Method );
				if( Request != null )
				{
					ResponseValue = GetWebResponse( Request );
				}
			}

			return ResponseValue;
		}
	}
}
